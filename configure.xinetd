# -*- perl -*-

$DEF_MDEMONIC = 0;
$DEF_MSTUNNEL = 0;
$DEF_MGENERIC = 0;
$DEF_CONF_TYPE = "xinetd";

eval 'require "./consubs.pl";'; die(<<"EOF") if ($@);

Could not load consubs.pl, which is required for running the configure script.
Please make sure it's in the current directory.

($@)

EOF

&prompt(<<"EOF", "") unless ($DEFAULT);
Configure (xinetd) for HTTPi/$ACTUAL_VERSION

This is the configure script for xinetd systems. Congratulations, you're
one of the really groovy people. Rob Braun is doing some hot stuff with it.

DO NOT RUN THIS IF:
	* you don't have xinetd (run configure.inetd instead, or download it
		from http://synack.net/xinetd/)
	* you have NO inetd or an unsupported one (run configure.generic)
	* you want the daemonised version (run configure.demonic)

PLEASE NOTE: YOUR CONFIGURATION FILE IS ASSUMED TO BE /etc/xinetd.conf!

Press ENTER to continue or BREAK/CTRL-C to bail out:
EOF

print "\nChecking system defaults ...\n\n";
$DEF_ROOT = &yncheck("Are we running as root?", "die if ($<);");
if (!$DEF_ROOT && !$DEFAULT) {
	&prompt(<<"EOF", "");

You will only be able to write out the object file, and you might not be
able to even do that without appropriate permissions. Consider running this
Configure script as root if you want to install HTTPi fully.

Press ENTER to continue.
EOF
	$DO_INSTALL = 0;
} else {
	$DO_INSTALL = &prompt(<<"EOF", "y") unless ($DEFAULT);
You're running as root, so we can do the whole caboodle, including write out
the object file and patch your xinetd's configuration files. If you say "n"
to this question, we'll just write out the object file.

If you are just patching an already existing and running HTTPi installation
(i.e. the changes are already in /etc/xinetd.conf, and it's going to go to
the same install path), you should probably answer "n".

If you are starting from scratch -- nothing installed -- answer "y" unless
you really don't want xinetd to know about HTTPi yet.

Do everything, including xinetd.conf and services modifications?
EOF
	$DO_INSTALL = ($DO_INSTALL eq 'y' && !$DEFAULT) ? 1 : 0;
}
if (!$DO_INSTALL) {
	print <<"EOF";
Questions pertaining to xinetd installation won't be asked by this script.

EOF
	}

&firstchecks;

$DEF_INCONF = &wherecheck("Verifying /etc/xinetd.conf", "/etc/xinetd.conf",
	<<"EOF");

Without /etc/xinetd.conf, your xinetd won't know what services should be
running and active. You *do* have xinetd, don't you?

Note that if your configuration file is not /etc/xinetd.conf, you'll get
this message spuriously. Sorry. Symlink it, or something.

EOF

eval 'require "./conquests.pl";'; die(<<"EOF") if ($@);

Could not load conquests.pl, which is required as part of the standard
questions suite for all of the configure scripts. Please make sure it's in
the current directory.

($@)

EOF

$USER_ID = &prompt(<<"EOF", $ENV{'SUDO_USER'} || $ENV{'USER'} || 'nobody') unless (!$DO_INSTALL);
What user do you want the server to run as? If you select someone other than
'root', the server will not be able to change (e)uid to an executable's owner,
and you'll need to make sure the access log (getting to that) is writeable
by that user.

On the other hand, if you select 'root', be forewarned this is a potential
security hole (to run *any* webserver as root, not just HTTPi).

What user do you want the script to run as?
EOF

$WAIT_MODE = &prompt(<<"EOF", "0") unless (!$DO_INSTALL);
A further bonus to slow systems is, because HTTPi runs out of xinetd, the
ability to restrict the number of simultaneous HTTPis that can run. Thus,
you can get by with a practically invisible webserver by specifying very
few, or just one, instance(s) to run at a time.

Unlike inetd, which says either one process or an infinite number, you can
actually set a maximum forking in xinetd. Specify the maximum number of
simultaneous HTTPi processes you want running.

USE 0 FOR INFINITE NUMBER (note that xinetd will curtail runaway processes,
so fear not -- this will not chomp your system).

Some versions of xinetd may not behave correctly with a non-zero value that
is set too low.

How many processes maximum (0 for no maximum)?
EOF

$WAIT_MODE += 0;

unless (!$DO_INSTALL) {
$IP_ADDR = &prompt(<<"EOF", "default");
xinetd HTTPi can do IP-based virtual hosting like Demonic HTTPi can, allowing
you to bind different instances of HTTPi to different IP addresses if you
prefer not to use the IP-less Host:-based redirect feature.

If you just say "default", it will bind to INADDR_ANY and will listen on any
interface. Otherwise, YOU MUST HAVE A SEPARATE HTTPi EXECUTABLE AND PROCESS
PER IP ADDRESS BOUND -- HTTPi is not designed to share one executable across
multiple sockets. Make sure that ports don't conflict either.

Which IP address to bind to?
EOF

$DEF_TCP_PORT = $PORT_NO = &prompt(<<"EOF", "80");
What numerical TCP port do you want the webserver to run on? 80 is the default
but if you're using configure to build multiple HTTPis on multiple ports,
make sure you give a different answer this time.

Which TCP port number?
EOF

$SERV_NAME = &prompt(<<"EOF", ($PORT_NO eq '80')?"httpi":"httpi$PORT_NO");

To run properly in xinetd, /etc/xinetd.conf must contain a service mapped to
the TCP port number you chose ($PORT_NO). Each name must be unique to its
port number so that xinetd can unambiguously decipher which goes where.

Avoid having multiple services mapped to the same port number -- it's really
very confusing. If you know what's good for you, you WON'T use one already
in /etc/services, or you'll really make a mess.

Which service name?
EOF

print "Checking /etc/xinetd.conf for competing services ... ";
open(S, "/etc/xinetd.conf") || die("\nNo read access.\n\n");
$j = 0; while(<S>) {
	/service\s+$SERV_NAME\b/ && ($j = $_);
}
if ($j) {
	print <<"EOF";
ack! I found one!:
$j

YOU WILL NEED TO EDIT /etc/xinetd.conf AFTERWARDS, BEFORE YOU START THE
WEBSERVER UP! Otherwise, xinetd will be very confused. Make sure you select
ONLY ONE -- either HTTPi's service block or this one. You may need to re-run
configure and select a new port (configure will build the service for you).

EOF
} else {
	print "none found.\nWhew! (BUT MAKE SURE NOTHING'S ON THE SAME PORT!)\n\n";
}
}

$j = &prompt(<<"EOF", "") unless (!$DO_INSTALL);
LAST CHANCE BEFORE CHANGES ARE COMMITTED!

If you continue beyond this point, configure will alter your
/etc/xinetd.conf and place the new HTTPi build in $INSTALL_PATH.

If you want to continue, just press ENTER.
If you don't, press CTRL-C NOW!
EOF
$j = &prompt(<<"EOF", "") unless ($DO_INSTALL);
LAST CHANCE BEFORE CHANGES ARE COMMITTED!

If you continue beyond this point, configure will build your HTTPi and
overwrite any file currently at $INSTALL_PATH.

If you want to continue, just press ENTER.
If you don't, press CTRL-C NOW!
EOF

$INSTALL_PATH = &detaint($INSTALL_PATH);
print "Writing out the configured httpi to $INSTALL_PATH ... ";

# process file
# ---------------
(open(S, "httpi.in") && open(T, ">$INSTALL_PATH")) || die(<<"EOF");

Couldn't write out the new httpi. Check permissions on httpi.in in the
current directory and the destination path.

EOF
print T &preproc(\*S);
close(T);
close(S);
print "done.\n\n";
# ---------------

# process file using Mpp
# ---------------
open(T, ">$INSTALL_PATH.exptl") || die(<<"EOF");

Couldn't write out the new httpi. Check permissions on httpi.in in the
current directory and the destination path.

EOF
print T Mpp->include("httpi.exptl"); close(T);
print "done\n\n";
# ---------------


if ($DO_INSTALL) {
print "Writing changes to /etc/xinetd.conf ... ";
open(S, ">>/etc/xinetd.conf") || die(
	"\n\nAre you really root? I can't write to this file.\n");
$wmode = ($WAIT_MODE == 1) ? 'yes' : 'no';
$mproc = ($WAIT_MODE == 0) ? 'UNLIMITED' : "$WAIT_MODE";
$pbind = ($IP_ADDR eq 'default') ? '' : <<"EOF";
	bind         = $IP_ADDR
EOF
print S <<"EOF";

# added by HTTPi install
service $SERV_NAME
{
	type         = UNLISTED
	protocol     = tcp
	port         = $PORT_NO
	flags        = REUSE
	socket_type  = stream
	wait         = $wmode
	instances    = $mproc
	user         = $USER_ID
	server       = $INSTALL_PATH
$pbind
}

EOF
close(S);
print "done.\n\nchmod()ding $INSTALL_PATH to 0755 ... ";
chmod 0755, "$INSTALL_PATH" || die("\n\nWhat the heck? Can't do it.\n");
print "done.\n\n";

print <<"EOF";
Successfully configured!

Now, you must restart your xinetd process to enable the webserver.

Remember to read the documentation for last minute information! Bye now.
EOF
exit; } else {
	print <<"EOF";
Done.

IF THIS IS A FIRST-TIME INSTALL:
Note that no changes have been made to xinetd, so the webserver will not
actually run yet. You will need to re-run as root and answer yes to the
first question for that to happen.

IF NOT:
The changes should take effect on the webserver's next access (assuming it's
running).

Remember to read the documentation file for last minute information. Bye!

EOF
}
