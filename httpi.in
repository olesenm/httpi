~check ISNTINSTALLEDYET

******* HEY! THIS ISN'T THE REAL WEBSERVER! DON'T RUN THIS! RUN CONFIGURE!

Thanks.
~
~
#!DEF_PERL
$VERSION = "0.7 (DEF_CONF_TYPE/DEF_ARCH)";

# HTTPi Hypertext Tiny Truncated Process Implementation
# Copyright 1999 Cameron Kaiser # All rights reserved # Please read LICENSE
# Do not strip this copyright message.

$logfile = "DEF_ACCESS_LOG";
$path = "DEF_HTDOCS_PATH";
$sockaddr = 'S n a4 x8';

~check MDEMONIC
if ($pid = fork()) { exit; }
$0 = "dhttpi: binding port ...";
$bindthis = pack($sockaddr, DEF_AF_INET, DEF_TCP_PORT, DEF_INADDR_ANY);
socket(S, DEF_PF_INET, DEF_SOCK_STREAM, DEF_IPPROTO_TCP);
setsockopt(S, DEF_SOL_SOCKET, DEF_SO_REUSEADDR, 1);
bind(S, $bindthis) || die("$0: while binding port DEF_TCP_PORT:\n\"$!\"\n");
listen(S, DEF_SOMAXCONN);
$0 = "dhttpi: connected and waiting DEF_IP_ADDR:DEF_TCP_PORT";
~
$0 = "httpi: handling request";
~


~check MFALSE

*** The content types hash is a simple associative array with extensions for
    keys and MIME types for values.

~
~
%content_types =
	("html" => "text/html",
	 "class" => "application/octet-stream",
	 "htm" => "text/html",
	 "txt" => "text/plain",
	 "gif" => "image/gif",
	 "zip" => "application/x-zip-compressed",
	 "gz"  => "application/x-gzip",
	 "jpeg" => "image/jpeg",
	 "jpg" => "image/jpeg");
~check MFALSE

*** The restrictions matrix is documented in the manual. The keys are the
    filepaths and the values are the matrices themselves.

~
~
~check MRESTRICTIONS
%restrictions =
	("/nw" => "^10\.##^Mozilla#MSIE");
		# See documentation for interpreting this string.
~
~

$headers = <<"EOF";
Server: HTTPi/$VERSION
MIME-Version: 1.0
EOF

###############################################################
# WHITE HATS ONLY BELOW THIS POINT -- SEE DOCUMENTATION FIRST #
###############################################################

sub sock_to_host {
~check MFALSE

*** Turn STDIN's socket address into an IP and, if we're lucky, a host name.

~
~
	local($sock) = getpeername(STDIN);

	return (undef, undef, undef) if (!$sock);
	local($AFC, $port, $thataddr, $zero) = unpack($sockaddr, $sock);
	local($ip) = join('.', unpack("C4", $thataddr));
	local($hn) = gethostbyaddr($thataddr, 2) || $ip;
	return ($hn, $port, $ip);
}

sub htsponse {
~check MFALSE

*** Return an HTTP status code and explanation, along with any collected
    headers.

~
~
	($currentcode, $currentstring) = (@_);
	return if (0+$httpver < 1);
	local($what) = <<"EOF";
~check HTTP11WAIT
HTTP/$httpver $currentcode $currentstring
~
HTTP/1.0 $currentcode $currentstring
~
${headers}Date: $rfcdate
EOF
	$what =~ s/\n/\r\n/g;
	print stdout $what;
~check HTTP11WAIT
	&hthead("Connection: Keep-Alive") if (0+$httpver > 1 || $keep);
~
~
}

sub hthead {
~check MFALSE

*** Add headers to the HTTP output, and/or terminate the header block.

~
~
	local($header, $term) = (@_);
	return if (0+$httpver < 1);
	print stdout "$header\r\n" , ($term) ? "\r\n" : "";
}

sub htcontent {
~check MFALSE

*** Spew content, with the proper content type header and length header.

~
~
	local($what, $ctype) = (@_);
	($contentlength) = length($what);
	&hthead("Content-Length: $contentlength");
	&hthead("Content-Type: $ctype", 1);
	return if ($method eq 'HEAD');
	print stdout $what;
}

sub log {
~check MFALSE

*** Log the request.

~
~
 	if (open(J, ">>$logfile")) {
		local $q = $address . (($variables) ? "?$variables" : "");
		$contentlength += 0;
		$contentlength = 0 if ($method eq 'HEAD');
		local ($hostname, $port) = &sock_to_host();
		$hn = $hn || "-";
~check ORIG_LOG
		print J <<"EOF";
$hostname - - [$date] "$method $q HTTP/$httpver" $currentcode $contentlength "$httpref" ""
~
~
~check GROSS_LOG
		print J <<"EOF";
$hostname - - [$date] "$method $q HTTP/$httpver" $currentcode $contentlength "$httpref" "$httpua"
~
~
~check TERSE_LOG
		print J <<"EOF";
$hostname - - [$date] "$method $q HTTP/$httpver" $currentcode $contentlength "" ""
~
~
EOF
		close(J); }
	}

~check MFALSE

*** Various signal handlers (bye for SIGALRM and dead for __DIE__).

~
~

sub bye { exit; }

sub dead {
	&htsponse(500, "Server Error");
	&hterror("Server Error", <<"EOF");
While handling a request for resource $address, the server crashed. Please
attempt to notify the administrators.
<p>Useful(?) debugging information:
<pre>
@_
</pre>
EOF
	&log; exit;
}

$SIG{'__DIE__'} = \&dead;
$SIG{'ALRM'} = \&bye;

~check MFALSE

*** Main loop.

~
~
~check MDEMONIC
sub master {
	$0 = "dhttpi: handling request";
~
~
# $sock = getpeername(STDIN);
$rfcdate = scalar gmtime;
($dow, $mon, $dt, $tm, $yr) = ($rfcdate =~
	m/(...) (...) (..) (..:..:..) (....)/);
$dt += 0; $yr += 0;
$rfcdate = "$dow, $dt $mon $yr $tm GMT";
$date = scalar localtime;
($dow, $mon, $dt, $tm, $yr) = ($date =~
	m/(...) (...) (..) (..:..:..) (....)/);
$dt += 0;
$dt = substr("0$dt", length("0$dt") - 2, 2);
$date = "$dt/$mon/$yr:$tm DEF_TIME_ZONE"; 

select(STDOUT); $|=1; $address = 0; alarm 10;
while (<STDIN>) {
	if(/^(GET|HEAD|POST)\s+([^\s]+)\s+([^\s\r\l\n]*)/) {
		$method = $1;
		$address = $2; 
		$httpver = $3;
		$httpref = '';
		$httpua = '';
		$httpver = ($httpver =~ m#HTTP/([0-9]\.[0-9]+)#) ?
			($1) : (0.9);
		next unless ($httpver < 1);
	} else {
~check HTTP11WAIT
		$keep = 1 if (/^Connection: Keep-Alive/i);
~
~
		s/[\r\l\n]+$//;
		(/^Referer: (.+)/i) && ($httpref = $1);
		(/^User-agent: (.+)/i) && ($httpua = $1);
		(/^Content-length: (\d+)/i) && ($ENV{'CONTENT_LENGTH'} =
			$httpcl = $1);
		(/^Content-type: (.+)/i) && ($ENV{'CONTENT_TYPE'} =
			$httpct = $1);
		next unless (/^$/);
	}
	if (!$address) {
		&htsponse(400, "Bad Request");
		&hterror("Bad Request",
			"The server cannot understand your request.");
		&log; exit;
	}
	($address, $variables) = split(/\?/, $address);
	1 while $address =~ s#/\./#/#;
	1 while $address =~ s#^/\.\./#/#;
	1 while $address =~ s#/[^/]+/\.\./#/#;
	if ($address !~ m#/$# && -d "$path$address") {
		&htsponse(301, "Moved Permanently");
		&hthead("Location: http://DEF_SERVER_HOST$address/", 1);
		$keep = 0; &log; exit;
	}
	$address = "${address}index.html" if (-d "$path$address");

######## ADD YOUR HANDLERS OR MODULES HERE #########

	if(!open(S, "$path$address"))  {
		&htsponse(404, "File Not Found");
		&hterror("File Not Found",
			"The resource $address was not found on this system.");
	} else {
~check MRESTRICTIONS
		$fail = 0;
		J: foreach(sort { length $a <=> length $b }
				keys %restrictions) {
			next if ($address !~ /^$_/);
			($allowip, $denyip, $allowua, $denyua) =
				split(/#/, $restrictions{$_});
			if ($allowip || $denyip) {
				($hn, $port, $ip) = &sock_to_host();
				($allowip && $ip !~ /$allowip/) && ($fail = 1,
					last J);
				($denyip && $ip =~ /$denyip/) && ($fail = 1,
					last J);
			}
			($allowua && $httpua !~ /$allowua/) &&
				($fail = 2, last J);
			($denyua && $httpua =~ /$denyua/) &&
				($fail = 2, last J);
		}
		if ($fail) {
			&htsponse(403, "Forbidden");
			if ($fail == 1) {
				&hterror("Forbidden (Client Disallowed)",
					<<"EOF");
Your network address is not allowed to access this resource. Please contact
the server administrator if this message is in error.
EOF
				&log; exit;
			} else {
				&hterror("Forbidden (Browser Disallowed)",
					<<"EOF");
The browser you are using (<i>$httpua</i></code>) is not capable of or
is not allowed access to this resource.
EOF
				&log; exit;
			}
		}
~
~
		if (-x "$path$address") {
			$currentcode = 100;
			&log;
			if (!$<) {
				($x,$x,$x,$x,$uid,$gid) = stat(S);
~check CANDOSETRUID
				$< = $uid || die "can't set uid";
				$( = $gid || die "can't set gid";
~
~
				$> = $uid || die "can't set effuid";
				$) = $gid || die "can't set effgid";
			}
			($hostname, $port, $ip) = &sock_to_host();
			$ENV{'REQUEST_METHOD'} = $method;
			$ENV{'SERVER_NAME'} = "DEF_SERVER_HOST";
			$ENV{'SERVER_PROTOCOL'} = "HTTP/$httpver";
			$ENV{'SERVER_SOFTWARE'} = "HTTPi/$VERSION";
~check MDEMONIC
			$ENV{'SERVER_PORT'} = "DEF_TCP_PORT";
			$ENV{'SERVER_URL'} = "http://DEF_SERVER_HOST:DEF_TCP_PORT/";
~
			($x, $ENV{'SERVER_PORT'}, $x, $x) = unpack($sockaddr,
				getsockname(STDIN));
			$ENV{'SERVER_URL'} = "http://DEF_SERVER_HOST:$ENV{'SERVER_PORT'}/";
~
			$ENV{'SCRIPT_FILENAME'} = $path . $address;
			$ENV{'SCRIPT_NAME'} = $address;
			$ENV{'REMOTE_HOST'} = $hostname;
			$ENV{'REMOTE_ADDR'} = $ip;
			$ENV{'REMOTE_PORT'} = $port;
			$ENV{'QUERY_STRING'} = $variables;
			$ENV{'HTTP_USER_AGENT'} = $httpua;
			$ENV{'HTTP_REFERER'} = $httpref;
~check MDEMONIC
			if ($pid = fork()) { exit; } else {
~
~
~check MHTTPERL
				require "$path$address";
				exit;
~
				if ($method eq 'POST') { # needs stdin
					open(W, "|$path$address") || die;
					read(STDIN, $buf, $httpcl);
					print W $buf;
					exit;
				}
				exec "$path$address", "$variables";
				die "exec() returned -1";
~
~check MDEMONIC
			}
~
~
		}
		($x,$x,$x,$x,$x,$x,$x,$x,$x,$mtime) = stat(S);
		$mtime = scalar gmtime $mtime;
		($dow, $mon, $dt, $tm, $yr) =
			($mtime =~ m/(...) (...) (..) (..:..:..) (....)/);
		$dt += 0; $yr += 0;
		$ctype = 0;
		foreach(keys %content_types) {
			if ($address =~ /\.$_$/) {
				$ctype = $content_types{$_};
			}
		}
		$ctype ||= "text/plain";
		&htsponse(200, "OK");
		&hthead("Last-Modified: $dow, $dt $mon $yr $tm GMT");
		$j = $/; undef $/; $q = <S>; $/ = $j; close(S);
		&htcontent($q, $ctype);
	}
	&log;
~check HTTP11WAIT
	exit if (!$keep);
	alarm DEF_TIME_OUT;
~
	exit;
~
}

exit;
~check MDEMONIC
}
~
~

sub hterror {
	local($errstr, $expl) = (@_);
	&htcontent(<<"EOF", "text/html");
<html>
<body>
<h1>$errstr</h1>
$expl
<hr>
<address><a href = "http://stockholm.ptloma.edu/httpi/">httpi/$VERSION</a>
by Cameron Kaiser</address>
</body>
</html>
EOF
	}

~check MFALSE

*** accept() loop that spawns the single child for accepting connections
    in Demonic HTTPi.

~
~
~check MDEMONIC
for (;;) {
	$addr=accept(NS,S);
	if ($pid = fork()) {
		$0 = "dhttpi: waiting for child process";
		waitpid($pid, 0);
		$0 = "dhttpi: on DEF_IP_ADDR:DEF_TCP_PORT, last request " .
			scalar localtime;
	} else {
		$0 = "dhttpi: child switching to socket";
		open(STDIN, "<&NS");
		open(STDOUT, ">&NS");
		&master;
		exit;
	}
}
~
~
